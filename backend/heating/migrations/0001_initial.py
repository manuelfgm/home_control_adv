# Generated by Django 5.2.7 on 2025-10-22 13:30

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HeatingControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('controller_id', models.CharField(default='main_heating', max_length=50, unique=True)),
                ('name', models.CharField(default='Calefacción Principal', max_length=100)),
                ('status', models.CharField(choices=[('off', 'Apagado'), ('on', 'Encendido'), ('auto', 'Automático'), ('manual', 'Manual')], default='auto', max_length=10)),
                ('is_heating', models.BooleanField(default=False)),
                ('current_temperature', models.FloatField(blank=True, null=True)),
                ('target_temperature', models.FloatField(blank=True, null=True)),
                ('manual_override', models.BooleanField(default=False)),
                ('manual_override_until', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Heating controls',
            },
        ),
        migrations.CreateModel(
            name='TemperatureThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('high_temperature', models.FloatField(help_text='Temperatura alta en °C', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(40)])),
                ('low_temperature', models.FloatField(help_text='Temperatura baja en °C', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(35)])),
                ('hysteresis', models.FloatField(default=0.5, help_text='Histéresis en °C para evitar conmutación frecuente', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='HeatingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('controller_id', models.CharField(default='main_heating', max_length=50)),
                ('action', models.CharField(choices=[('turn_on', 'Encendido'), ('turn_off', 'Apagado'), ('schedule_start', 'Inicio programado'), ('schedule_end', 'Fin programado'), ('manual_override', 'Override manual'), ('temperature_reached', 'Temperatura alcanzada')], max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('temperature_before', models.FloatField(blank=True, null=True)),
                ('temperature_after', models.FloatField(blank=True, null=True)),
                ('target_temperature', models.FloatField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, help_text='Razón del cambio')),
                ('duration_minutes', models.IntegerField(blank=True, help_text='Duración en minutos (para acciones de apagado)', null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='heating_hea_timesta_66c47a_idx'), models.Index(fields=['controller_id', 'action'], name='heating_hea_control_ea4ddb_idx')],
            },
        ),
        migrations.CreateModel(
            name='HeatingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre descriptivo para el horario', max_length=100)),
                ('day_of_week', models.IntegerField(choices=[(0, 'Lunes'), (1, 'Martes'), (2, 'Miércoles'), (3, 'Jueves'), (4, 'Viernes'), (5, 'Sábado'), (6, 'Domingo')])),
                ('start_time', models.TimeField(help_text='Hora de inicio')),
                ('end_time', models.TimeField(help_text='Hora de fin')),
                ('target_temperature', models.FloatField(help_text='Temperatura objetivo en °C', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(35)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('day_of_week', 'start_time', 'end_time')},
            },
        ),
    ]
